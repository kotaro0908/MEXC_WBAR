#!/usr/bin/env python3
"""
OrderManager  ‚Äï  Á¥îÊàêË°åÔºàtype = 5ÔºâÂ∞ÇÁî®„ÅÆÊ≥®ÊñáÁÆ°ÁêÜ„ÇØ„É©„Çπ
-----------------------------------------------------------------
* „Ç®„É≥„Éà„É™„Éº        : create_market_order()
* TP / SL „Ç≠„É•„Éº    : queue_exit_market()
* Áñë‰ºº OCO          : WebSocket ÂÅ¥„Åã„Çâ on_fill() „ÅßÊÆãÊ≥®Êñá„Çí cancel
"""

from __future__ import annotations

import json
import logging
import os
import threading
import time
from collections import deque
from typing import Deque, Dict, List, Optional

from curl_cffi import requests
from dotenv import load_dotenv

# .env Ë™≠„ÅøËæº„ÅøÔºà„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Åã„ÇâËæø„ÇãÊÉ≥ÂÆöÔºâ
ENV_PATH = os.path.join(os.path.dirname(__file__), "../../config/.env")
load_dotenv(dotenv_path=ENV_PATH)

# --- Áí∞Â¢ÉÂ§âÊï∞ ---
API_KEY = os.getenv("API_KEY")
SECRET_KEY = os.getenv("SECRET_KEY")
UID = os.getenv("UID")  # UID ÁΩ≤ÂêçÁî®
MEXC_CONTRACT_BASE_URL = os.getenv("MEXC_CONTRACT_BASE_URL")  # ‰æã: https://contract.mexc.com

# --- „É≠„ÇÆ„É≥„Ç∞ ---
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# --- ÂÆöÊï∞ ---
ENDPOINT_ORDER_CREATE = "/api/v1/private/order/submit"
ENDPOINT_ORDER_CANCEL = "/api/v1/private/order/cancel"

ORDER_TYPE_MARKET: str = "5"  # ÊàêË°å
BUY: int = 1
SELL: int = 2


# ------------------------------------------------------------------ #
# ÁΩ≤ÂêçÁîüÊàê„Éò„É´„Éë                                                     #
# ------------------------------------------------------------------ #
def _uid_sign(body: dict) -> dict:
    """
    UID „Çí‰Ωø„Å£„Åü MEXC ÁâπÊúâ„ÅÆÁΩ≤ÂêçÁîüÊàê

    Returns
    -------
    dict
        {"time": "...", "sign": "..."} „ÇíËøî„Åô
    """
    import hashlib

    ts = str(int(time.time() * 1000))
    g = hashlib.md5((UID + ts).encode("utf-8")).hexdigest()[7:]
    s = json.dumps(body, separators=(",", ":"))
    sign = hashlib.md5((ts + s + g).encode("utf-8")).hexdigest()
    return {"time": ts, "sign": sign}


# ------------------------------------------------------------------ #
# „É°„Ç§„É≥„ÇØ„É©„Çπ                                                       #
# ------------------------------------------------------------------ #
class OrderManager:
    """
    - „Åô„Åπ„Å¶ MARKER ORDER (type 5) Âõ∫ÂÆö
    - TP / SL „ÅØ queue_exit_market() „ÅßÂÜÖÈÉ®‰øùÊåÅ
    - WebSocket ÂÅ¥„Åã„Çâ on_fill() „Çí„Ç≥„Éº„É´ ‚Üí Áñë‰ºº OCO
    """

    def __init__(self, symbol: str, leverage: int = 20) -> None:
        self.symbol = symbol
        self.leverage = leverage

        # orderId ‚Üí {"tp_id": ..., "sl_id": ...}
        self._exit_map: Dict[str, Dict[str, str]] = {}

        # exit „Ç≠„É•„ÉºÔºàTP/SL Â∏ÇÂ†¥Ê≥®ÊñáÁî®Ôºâ
        self._exit_queue: Deque[dict] = deque()
        self._queue_lock = threading.Lock()

        # Exit „Ç≠„É•„ÉºÂá¶ÁêÜÁî®„Çπ„É¨„ÉÉ„Éâ
        self._exit_worker = threading.Thread(
            target=self._process_exit_queue, name="ExitWorker", daemon=True
        )
        self._exit_worker.start()

    # ------------------------------ #
    # Public API                     #
    # ------------------------------ #

    def create_market_order(
        self, side: int, vol: str, open_type: int = 1
    ) -> Optional[str]:
        """
        Á¥îÊàêË°å„Ç®„É≥„Éà„É™„Éº

        Parameters
        ----------
        side : int
            1 = Buy, 2 = Sell
        vol : str
            ÂèñÂºïÊï∞Èáè (string)
        open_type : int, default=1
            1 = Isolated, 2 = Cross ÔºàAPI ‰ªïÊßò„Å´Ê∫ñÊã†Ôºâ

        Returns
        -------
        str | None
            ÊàêÂäüÊôÇ: orderId, Â§±ÊïóÊôÇ: None
        """
        body = {
            "symbol": self.symbol,
            "side": side,
            "type": ORDER_TYPE_MARKET,
            "openType": open_type,
            "leverage": self.leverage,
            "vol": vol,
        }
        body.update(_uid_sign(body))

        url = MEXC_CONTRACT_BASE_URL + ENDPOINT_ORDER_CREATE
        try:
            resp = requests.post(url, json=body, timeout=10)
            data = resp.json()
            if data.get("success") and data.get("code") == 0:
                order_id = str(data["data"])
                logger.info(f"‚úÖ Market entry sent: {order_id}")
                return order_id
            logger.error(f"‚ùå ENTRY FAIL: {data}")
        except Exception as exc:
            logger.exception(f"ENTRY EXCEPTION: {exc}")
        return None

    def queue_exit_market(
        self,
        entry_order_id: str,
        tp_side: int,
        sl_side: int,
        vol: str,
    ) -> None:
        """
        TP/SL Â∏ÇÂ†¥Ê≥®Êñá„Çí„Ç≠„É•„Éº„Å´ÁôªÈå≤„Åó„ÄÅOCO Áõ£Ë¶ñ„Éû„ÉÉ„Éó„Å´Á¥ê„Å•„Åë

        Notes
        -----
        * side „ÅØ entry „Å®ÈÄÜÊñπÂêë„Å´„Å™„Çã„Çà„ÅÜÂëº„Å≥Âá∫„ÅóÂÅ¥„ÅßÊ∏°„Åô
        """
        # „Ç≠„É•„ÉºÊäïÂÖ•Áî® dict
        tp_payload = {
            "symbol": self.symbol,
            "side": tp_side,
            "type": ORDER_TYPE_MARKET,
            "openType": 2,  # „Éù„Ç∏„Ç∑„Éß„É≥Ê±∫Ê∏àÔºùCLOSE(2)
            "leverage": self.leverage,
            "vol": vol,
        }
        sl_payload = {
            "symbol": self.symbol,
            "side": sl_side,
            "type": ORDER_TYPE_MARKET,
            "openType": 2,
            "leverage": self.leverage,
            "vol": vol,
        }

        with self._queue_lock:
            self._exit_queue.append(tp_payload)
            self._exit_queue.append(sl_payload)
            # „Ç≠„É•„Éº„Å´Á©ç„Çì„Å†È†Ü„Å´ orderId „ÅåËøî„ÇãÊÉ≥ÂÆö
            self._exit_map[entry_order_id] = {"tp_id": None, "sl_id": None}

    def on_exit_order_created(
        self, tp_id: str, sl_id: str, entry_order_id: str
    ) -> None:
        """„Ç≠„É•„Éº„Åã„Çâ exit ÈÄÅ‰ø°Âæå„ÄÅÂÆüÈöõ„ÅÆ orderId „Çí„Éû„ÉÉ„Éî„É≥„Ç∞"""
        self._exit_map[entry_order_id]["tp_id"] = tp_id
        self._exit_map[entry_order_id]["sl_id"] = sl_id

    def on_fill(self, filled_order_id: str) -> None:
        """
        WebSocket „Åß fill ÈÄöÁü•„ÇíÂèó‰ø°„Åó„Åü„ÇâÂëº„Å∂

        - TP „ÅåÂÖà„Å´Á¥ÑÂÆö ‚Üí SL „Çí„Ç≠„É£„É≥„Çª„É´
        - SL „ÅåÂÖà„Å´Á¥ÑÂÆö ‚Üí TP „Çí„Ç≠„É£„É≥„Çª„É´
        """
        for entry_id, exit_dict in list(self._exit_map.items()):
            tp_id = exit_dict.get("tp_id")
            sl_id = exit_dict.get("sl_id")

            if filled_order_id == tp_id and sl_id:
                self.cancel_order(sl_id)
                logger.info(f"OCO: TP filled ({tp_id}), SL {sl_id} cancelled")
                del self._exit_map[entry_id]

            elif filled_order_id == sl_id and tp_id:
                self.cancel_order(tp_id)
                logger.info(f"OCO: SL filled ({sl_id}), TP {tp_id} cancelled")
                del self._exit_map[entry_id]

    def cancel_order(self, order_id: str) -> bool:
        """Âçò‰∏ÄÊ≥®Êñá„Çí„Ç≠„É£„É≥„Çª„É´"""
        body = {"orderId": order_id}
        body.update(_uid_sign(body))

        url = MEXC_CONTRACT_BASE_URL + ENDPOINT_ORDER_CANCEL
        try:
            resp = requests.post(url, json=body, timeout=10)
            data = resp.json()
            if data.get("success"):
                logger.info(f"üõë CANCELED {order_id}")
                return True
            logger.error(f"‚ùå CANCEL FAIL: {data}")
        except Exception as exc:
            logger.exception(f"CANCEL EXCEPTION: {exc}")
        return False

    # ------------------------------ #
    # Internal Worker                #
    # ------------------------------ #

    def _process_exit_queue(self) -> None:
        """„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Åß exit „Ç≠„É•„Éº„ÇíÈÄÅ‰ø°„ÅóÁ∂ö„Åë„Çã"""
        while True:
            try:
                with self._queue_lock:
                    if not self._exit_queue:
                        time.sleep(0.1)
                        continue
                    payload = self._exit_queue.popleft()

                payload.update(_uid_sign(payload))
                url = MEXC_CONTRACT_BASE_URL + ENDPOINT_ORDER_CREATE
                resp = requests.post(url, json=payload, timeout=10)
                data = resp.json()

                if data.get("success") and data.get("code") == 0:
                    logger.info(f"‚û°Ô∏è  Exit order sent: {data['data']}")
                else:
                    logger.error(f"‚ùå EXIT SEND FAIL: {data}")

            except Exception as exc:
                logger.exception(f"EXIT QUEUE EXCEPTION: {exc}")
            time.sleep(0.05)
